---
import Layout from '../layouts/Layout.astro';
import Footer from '../components/Footer';
import CodeExample from '../components/CodeExample.astro';
---

<Layout title="Do-Notation - Functype">
  <div class="min-h-screen bg-white">
    <section class="px-6 py-20 text-center max-w-4xl mx-auto">
      <h1 class="text-5xl md:text-6xl font-bold text-gray-900 mb-6">Do-Notation</h1>
      <p class="text-2xl text-gray-600 mb-4">Scala-like for-comprehensions</p>
      <p class="text-lg text-gray-500 max-w-2xl mx-auto">
        Compose monadic operations elegantly without nested flatMap calls
      </p>
      <div class="flex gap-4 justify-center mt-8">
        <a href="/api-docs/modules/do.html" class="px-6 py-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 transition-colors">
          API Documentation
        </a>
        <a href="https://github.com/jordanburke/functype/blob/main/src/do" target="_blank" rel="noopener noreferrer" class="px-6 py-3 bg-white text-blue-600 border-2 border-blue-600 rounded-lg hover:bg-blue-50 transition-colors">
          View Source
        </a>
      </div>
    </section>

    <section class="px-6 py-16 bg-gray-50">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-gray-900 mb-6">What is Do-Notation?</h2>
        <p class="text-lg text-gray-700 mb-4">
          Do-notation provides generator-based monadic comprehensions inspired by Scala's for-comprehensions.
          It makes complex monadic chains readable and maintainable by eliminating nested flatMap calls.
        </p>
        <CodeExample region="readme-do-notation" />
      </div>
    </section>

    <section class="px-6 py-16">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-gray-900 mb-8">Key Features</h2>
        <div class="grid md:grid-cols-2 gap-6">
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-xl font-semibold mb-3">Scala-Inspired</h3>
            <p class="text-gray-700">Similar syntax to Scala's for-comprehensions with generators</p>
          </div>
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-xl font-semibold mb-3">Type-Safe</h3>
            <p class="text-gray-700">Full TypeScript inference with the $ helper function</p>
          </div>
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-xl font-semibold mb-3">Short-Circuiting</h3>
            <p class="text-gray-700">None/Left/Failure automatically propagates through the chain</p>
          </div>
          <div class="bg-gray-50 rounded-xl p-6">
            <h3 class="text-xl font-semibold mb-3">Performance</h3>
            <p class="text-gray-700">175x faster than nested flatMaps for List comprehensions</p>
          </div>
        </div>
      </div>
    </section>

    <section class="px-6 py-16 bg-gray-50">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-gray-900 mb-8">Common Patterns</h2>

        <div class="space-y-8">
          <div>
            <h3 class="text-xl font-semibold mb-4">Option Chaining</h3>
            <div class="bg-gray-900 rounded-xl p-6">
              <pre class="text-sm font-mono overflow-x-auto"><code><span class="text-purple-400">const</span> <span class="text-blue-300">result</span> <span class="text-gray-100">=</span> <span class="text-yellow-300">Do</span><span class="text-gray-100">(</span><span class="text-purple-400">function*</span> <span class="text-gray-100">()</span> <span class="text-gray-100">{</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">x</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-yellow-300">Option</span><span class="text-gray-100">(</span><span class="text-green-400">5</span><span class="text-gray-100">))</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">y</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-yellow-300">Option</span><span class="text-gray-100">(</span><span class="text-green-400">10</span><span class="text-gray-100">))</span>
  <span class="text-purple-400">return</span> <span class="text-blue-300">x</span> <span class="text-purple-400">+</span> <span class="text-blue-300">y</span>
<span class="text-gray-100">})</span>  <span class="text-gray-500">// Option(15)</span></code></pre>
            </div>
          </div>

          <div>
            <h3 class="text-xl font-semibold mb-4">List Comprehensions (Cartesian Products)</h3>
            <div class="bg-gray-900 rounded-xl p-6">
              <pre class="text-sm font-mono overflow-x-auto"><code><span class="text-purple-400">const</span> <span class="text-blue-300">pairs</span> <span class="text-gray-100">=</span> <span class="text-yellow-300">Do</span><span class="text-gray-100">(</span><span class="text-purple-400">function*</span> <span class="text-gray-100">()</span> <span class="text-gray-100">{</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">x</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-yellow-300">List</span><span class="text-gray-100">([</span><span class="text-green-400">1</span><span class="text-gray-100">,</span> <span class="text-green-400">2</span><span class="text-gray-100">]))</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">y</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-yellow-300">List</span><span class="text-gray-100">([</span><span class="text-green-400">10</span><span class="text-gray-100">,</span> <span class="text-green-400">20</span><span class="text-gray-100">]))</span>
  <span class="text-purple-400">return</span> <span class="text-gray-100">{</span> <span class="text-blue-300">x</span><span class="text-gray-100">,</span> <span class="text-blue-300">y</span> <span class="text-gray-100">}</span>
<span class="text-gray-100">})</span>
<span class="text-gray-500">{'// List([{x:1,y:10}, {x:1,y:20}, {x:2,y:10}, {x:2,y:20}])'}</span></code></pre>
            </div>
          </div>

          <div>
            <h3 class="text-xl font-semibold mb-4">Error Handling with Either</h3>
            <div class="bg-gray-900 rounded-xl p-6">
              <pre class="text-sm font-mono overflow-x-auto"><code><span class="text-purple-400">const</span> <span class="text-blue-300">validated</span> <span class="text-gray-100">=</span> <span class="text-yellow-300">Do</span><span class="text-gray-100">(</span><span class="text-purple-400">function*</span> <span class="text-gray-100">()</span> <span class="text-gray-100">{</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">email</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-blue-300">validateEmail</span><span class="text-gray-100">(</span><span class="text-blue-300">input</span><span class="text-gray-100">))</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">user</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-blue-300">fetchUser</span><span class="text-gray-100">(</span><span class="text-blue-300">email</span><span class="text-gray-100">))</span>
  <span class="text-purple-400">const</span> <span class="text-blue-300">saved</span> <span class="text-gray-100">=</span> <span class="text-purple-400">yield*</span> <span class="text-yellow-300">$</span><span class="text-gray-100">(</span><span class="text-blue-300">saveUser</span><span class="text-gray-100">(</span><span class="text-blue-300">user</span><span class="text-gray-100">))</span>
  <span class="text-purple-400">return</span> <span class="text-blue-300">saved</span>
<span class="text-gray-100">})</span>
<span class="text-gray-500">// If any step returns Left, chain short-circuits</span></code></pre>
            </div>
          </div>
        </div>
      </div>
    </section>

    <section class="px-6 py-16">
      <div class="max-w-4xl mx-auto">
        <h2 class="text-3xl font-bold text-gray-900 mb-8">When to Use Do-Notation</h2>
        <div class="space-y-6">
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-green-600 font-bold">✓</div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Chaining 3+ monadic operations</h3>
              <p class="text-gray-700">Complex workflows with multiple sequential steps</p>
            </div>
          </div>
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-green-600 font-bold">✓</div>
            <div>
              <h3 class="font-semibold text-lg mb-2">List comprehensions (cartesian products)</h3>
              <p class="text-gray-700">Generating combinations, test data, permutations</p>
            </div>
          </div>
          <div class="flex gap-4">
            <div class="flex-shrink-0 w-8 h-8 bg-green-100 rounded-full flex items-center justify-center text-green-600 font-bold">✓</div>
            <div>
              <h3 class="font-semibold text-lg mb-2">Prioritizing readability over micro-optimizations</h3>
              <p class="text-gray-700">Business logic, validation pipelines, data transformations</p>
            </div>
          </div>
        </div>
      </div>
    </section>

    <Footer client:load />
  </div>
</Layout>
